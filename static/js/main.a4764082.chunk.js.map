{"version":3,"sources":["App.js","index.js"],"names":["App","state","good","neutral","bad","getOptions","Object","keys","map","key","slice","toUpperCase","handleChange","feedbackOption","target","textContent","toLowerCase","setState","countTotalFeedback","countPositiveFeedbackPercentage","totalCount","Math","round","options","this","option","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAkEeA,E,4MA/DXC,MAAQ,CACJC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTC,WAAa,WAET,OADaC,OAAOC,KAAK,EAAKN,OAClBO,KACR,SAAAC,GAAG,gBAAOA,EAAIC,MAAM,EAAG,GAAGC,eAAvB,OAAuCF,EAAIC,MAAM,Q,EAI5DE,aAAe,YAAiB,IACtBC,EADqB,EAAbC,OACgBC,YAAYC,cAC1C,EAAKC,SAAL,eAAiBJ,EAAiB,EAAKZ,MAAMY,GAAkB,K,EAGnEK,mBAAqB,WAAO,IAAD,EACQ,EAAKjB,MACpC,OAFuB,EACfC,KADe,EACTC,QADS,EACAC,K,EAI3Be,gCAAkC,WAAO,IAC7BjB,EAAS,EAAKD,MAAdC,KACFkB,EAAa,EAAKF,qBACxB,OAAOG,KAAKC,MAAOpB,EAAOkB,EAAc,M,uDAGlC,IAAD,OACCG,EAAUC,KAAKnB,aAErB,OACI,gCACI,uDACCkB,EAAQf,KAAI,SAAAiB,GAAM,OACf,wBAA8BC,QAAS,EAAKd,aAA5C,SACKa,GADQ,OAASA,MAK1B,4CAC+B,IAA9BD,KAAKN,qBACF,kDAEA,+BACKK,EAAQf,KAAI,SAAAiB,GAAM,OACf,+BACKA,EADL,KACe,EAAKxB,MAAMwB,EAAOT,iBADxBS,MAIb,yCAAwBD,KAAKN,uBAArB,SACR,oDACuB,IAClBM,KAAKL,kCAFV,MAAQ,sB,GArDdQ,aCGlBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.a4764082.chunk.js","sourcesContent":["import { Component } from 'react';\n\nclass App extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n\n    getOptions = () => {\n        const keys = Object.keys(this.state);\n        return keys.map(\n            key => `${key.slice(0, 1).toUpperCase()}${key.slice(1)}`,\n        );\n    };\n\n    handleChange = ({ target }) => {\n        const feedbackOption = target.textContent.toLowerCase();\n        this.setState({ [feedbackOption]: this.state[feedbackOption] + 1 });\n    };\n\n    countTotalFeedback = () => {\n        const { good, neutral, bad } = this.state;\n        return good + neutral + bad;\n    };\n\n    countPositiveFeedbackPercentage = () => {\n        const { good } = this.state;\n        const totalCount = this.countTotalFeedback();\n        return Math.round((good / totalCount) * 100);\n    };\n\n    render() {\n        const options = this.getOptions();\n\n        return (\n            <div>\n                <h2>Please leave feedback</h2>\n                {options.map(option => (\n                    <button key={'btn-' + option} onClick={this.handleChange}>\n                        {option}\n                    </button>\n                ))}\n\n                <h2>Statictics</h2>\n                {this.countTotalFeedback() === 0 ? (\n                    <p>No feedback given</p>\n                ) : (\n                    <ul>\n                        {options.map(option => (\n                            <li key={option}>\n                                {option}: {this.state[option.toLowerCase()]}\n                            </li>\n                        ))}\n                        <li key=\"Total\">Total: {this.countTotalFeedback()}</li>\n                        <li key=\"Positive\">\n                            Positive feedback:{' '}\n                            {this.countPositiveFeedbackPercentage()}%\n                        </li>\n                    </ul>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}